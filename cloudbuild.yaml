steps:
  # Steps 1 & 2: Frontend build (No changes)
  - name: 'gcr.io/cloud-builders/npm'
    id: 'npm-install'
    args: ['install']
    dir: 'frontend'
  - name: 'gcr.io/cloud-builders/npm'
    id: 'build-frontend'
    args: ['run', 'build']
    dir: 'frontend'
    waitFor: ['npm-install']

  # Step 3: Deploy Frontend to GCS (No changes)
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'deploy-frontend'
    args: ['-m', 'rsync', '-r', '-c', '-d', './dist', 'gs://cdms.jjckrbbt.dev']
    dir: 'frontend'
    waitFor: ['build-frontend']

  # Step 4 & 5: Build and push the main application image (No changes)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend-image'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}', '.', '-f', 'Dockerfile']
    dir: 'backend'
    waitFor: ['build-frontend']
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend-image'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}']
    waitFor: ['build-backend-image']

  # Step 6: Run DB Migrations using the official Cloud SQL Auth Proxy image
  - name: 'gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1'
    id: 'run-db-migrations'
    waitFor: ['push-backend-image']
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # This image has the proxy. Start it and wait for it to be ready.
        /cloud_sql_proxy cdms-463617:us-central1:cdms &
        sleep 5

        # The image doesn't have go, so we download and run a pre-compiled goose binary
        wget https://github.com/pressly/goose/releases/latest/download/goose_linux_amd64 -O /goose
        chmod +x /goose

        # Run the migrations using the full connection string from the secret
        /goose -dir "backend/sql/schema" postgres "$$DB_SECRET" up
    secretEnv: ['DB_SECRET']

 # Step 7: Run DB Migrations using our custom migrator image
  - name: 'gcr.io/${PROJECT_ID}/migrator:latest'
    id: 'run-db-migrations'
    waitFor: ['build-migrator']
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # CORRECTED: Explicitly tell the proxy to use a Unix socket
        # The /cloudsql directory is standard for this purpose.
        /usr/local/bin/cloud_sql_proxy --unix-socket /cloudsql cdms-463617:us-central1:cdms &
        
        # Wait for the socket file to be created by the proxy
        sleep 10
        
        # Run goose with the full DB URL pointing to the socket path.
        # This now matches where the proxy is creating the connection.
        /go/bin/goose -dir "backend/sql/schema" postgres "$$DB_SECRET" up
    secretEnv: ['DB_SECRET']

# Top-level key to make the secret available to the entire build process.
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/cdms-database-url/versions/latest
    env: 'DB_SECRET'

images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}'

options:
  logging: CLOUD_LOGGING_ONLY
