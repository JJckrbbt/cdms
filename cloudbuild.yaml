steps:
  # Steps 1-5: Frontend build, deploy, and backend build/push remain the same
  - name: 'gcr.io/cloud-builders/npm'
    id: 'npm-install'
    args: ['install']
    dir: 'frontend'
  - name: 'gcr.io/cloud-builders/npm'
    id: 'build-frontend'
    args: ['run', 'build']
    dir: 'frontend'
    waitFor: ['npm-install']
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'deploy-frontend'
    args: ['-m', 'rsync', '-r', '-c', '-d', './dist', 'gs://cdms.jjckrbbt.dev']
    dir: 'frontend'
    waitFor: ['build-frontend']
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend-image'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}', '.', '-f', 'Dockerfile']
    dir: 'backend'
    waitFor: ['build-frontend']
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend-image'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}']
    waitFor: ['build-backend-image']

  # Step 6: Run DB Migrations (Corrected)
  - name: 'golang:1.24-alpine' # Using a standard Go image
    id: 'run-db-migrations'
    entrypoint: 'sh'
    waitFor: ['push-backend-image']
    args:
      - '-c'
      - |
        # Install dependencies: wget for the proxy, and git for goose
        apk add --no-cache wget git

        # Download and install the Cloud SQL Auth Proxy
        wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.amd64 -O /cloud_sql_proxy
        chmod +x /cloud_sql_proxy
        
        # Start the proxy in the background to connect to our DB
        ./cloud_sql_proxy cdms-463617:us-central1:cdms &
        sleep 5

        # Install goose
        go install github.com/pressly/goose/v3/cmd/goose@latest
        
        # Run the migrations using the secret
        goose -dir "backend/sql/schema" postgres "$$DB_SECRET" up
    secretEnv: ['DB_SECRET']

  # Step 7: Deploy to Cloud Run (No changes)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    args:
      - 'run'
      - 'deploy'
      - 'cdms-backend'
      - '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8080'
      - '--cpu-boost'
      - '--add-cloudsql-instances=cdms-463617:us-central1:cdms'
      - '--set-secrets=DATABASE_URL=cdms-database-url:latest,SENTRY_DSN=cdms-sentry-dsn:latest'
      - '--set-env-vars=GCS_BUCKET_NAME=cdms.jjckrbbt.dev'
    waitFor: ['run-db-migrations']

# Top-level key to make the secret available to the build
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/cdms-database-url/versions/latest
    env: 'DB_SECRET'

images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cdms-repo/cdms-backend:${SHORT_SHA}'

options:
  logging: CLOUD_LOGGING_ONLY
