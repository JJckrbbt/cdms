// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chargeback_reporting.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAverageDaysForPFSCompletionForWindow = `-- name: GetAverageDaysForPFSCompletionForWindow :one
SELECT
    COALESCE(AVG(days_pfs_to_complete), 0)::NUMERIC(10, 2)::TEXT AS avg_days -- Explicitly cast to TEXT
FROM
    historical_chargebacks_with_vendor_info
WHERE
    pfs_completion_date BETWEEN $1 AND $2
`

type GetAverageDaysForPFSCompletionForWindowParams struct {
	PfsCompletionDate   interface{} `json:"pfs_completion_date"`
	PfsCompletionDate_2 interface{} `json:"pfs_completion_date_2"`
}

func (q *Queries) GetAverageDaysForPFSCompletionForWindow(ctx context.Context, arg GetAverageDaysForPFSCompletionForWindowParams) (string, error) {
	row := q.db.QueryRow(ctx, getAverageDaysForPFSCompletionForWindow, arg.PfsCompletionDate, arg.PfsCompletionDate_2)
	var avg_days string
	err := row.Scan(&avg_days)
	return avg_days, err
}

const getAverageDaysToPFSForWindow = `-- name: GetAverageDaysToPFSForWindow :one
SELECT
    COALESCE(AVG(days_open_to_pfs), 0)::NUMERIC(10, 2)::TEXT AS avg_days -- Explicitly cast to TEXT
FROM
    historical_chargebacks_with_vendor_info
WHERE
    passed_to_pfs_date BETWEEN $1 AND $2
`

type GetAverageDaysToPFSForWindowParams struct {
	PassedToPfsDate   interface{} `json:"passed_to_pfs_date"`
	PassedToPfsDate_2 interface{} `json:"passed_to_pfs_date_2"`
}

func (q *Queries) GetAverageDaysToPFSForWindow(ctx context.Context, arg GetAverageDaysToPFSForWindowParams) (string, error) {
	row := q.db.QueryRow(ctx, getAverageDaysToPFSForWindow, arg.PassedToPfsDate, arg.PassedToPfsDate_2)
	var avg_days string
	err := row.Scan(&avg_days)
	return avg_days, err
}

const getChargebackStatusSummary = `-- name: GetChargebackStatusSummary :many
SELECT
    current_status,
    COUNT(*) AS status_count,
    SUM(abs_amount)::NUMERIC AS total_value,
    (SUM(abs_amount) * 100.0 / SUM(SUM(abs_amount)) OVER ())::NUMERIC(5, 2) AS percentage_of_total
FROM
    historical_chargebacks_with_vendor_info
WHERE
    current_status != 'Reconciled - Off Report' -- Exclude reconciled items from this summary
GROUP BY
    current_status
`

type GetChargebackStatusSummaryRow struct {
	CurrentStatus     CdmsStatus     `json:"current_status"`
	StatusCount       int64          `json:"status_count"`
	TotalValue        pgtype.Numeric `json:"total_value"`
	PercentageOfTotal pgtype.Numeric `json:"percentage_of_total"`
}

// Gets the count, total value, and percentage of total value for each chargeback status for active items.
func (q *Queries) GetChargebackStatusSummary(ctx context.Context) ([]GetChargebackStatusSummaryRow, error) {
	rows, err := q.db.Query(ctx, getChargebackStatusSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChargebackStatusSummaryRow
	for rows.Next() {
		var i GetChargebackStatusSummaryRow
		if err := rows.Scan(
			&i.CurrentStatus,
			&i.StatusCount,
			&i.TotalValue,
			&i.PercentageOfTotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewChargebackStatsForWindow = `-- name: GetNewChargebackStatsForWindow :one
SELECT
    COUNT(*) AS new_chargebacks_count,
    COALESCE(SUM(chargeback_amount), 0)::NUMERIC(12, 2)::TEXT AS new_chargebacks_value
FROM
    chargeback
WHERE
    created_at BETWEEN $1 AND $2
`

type GetNewChargebackStatsForWindowParams struct {
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
}

type GetNewChargebackStatsForWindowRow struct {
	NewChargebacksCount int64  `json:"new_chargebacks_count"`
	NewChargebacksValue string `json:"new_chargebacks_value"`
}

// Gets the count and total value of new chargebacks created within a specific date window.
func (q *Queries) GetNewChargebackStatsForWindow(ctx context.Context, arg GetNewChargebackStatsForWindowParams) (GetNewChargebackStatsForWindowRow, error) {
	row := q.db.QueryRow(ctx, getNewChargebackStatsForWindow, arg.CreatedAt, arg.CreatedAt_2)
	var i GetNewChargebackStatsForWindowRow
	err := row.Scan(&i.NewChargebacksCount, &i.NewChargebacksValue)
	return i, err
}

const getPFSCountsForWindow = `-- name: GetPFSCountsForWindow :one
SELECT
    COUNT(*) FILTER (WHERE passed_to_pfs_date BETWEEN $1 AND $2) AS passed_to_pfs_count,
    COUNT(*) FILTER (WHERE pfs_completion_date BETWEEN $1 AND $2) AS completed_by_pfs_count
FROM
    historical_chargebacks_with_vendor_info
`

type GetPFSCountsForWindowParams struct {
	PassedToPfsDate   interface{} `json:"passed_to_pfs_date"`
	PassedToPfsDate_2 interface{} `json:"passed_to_pfs_date_2"`
}

type GetPFSCountsForWindowRow struct {
	PassedToPfsCount    int64 `json:"passed_to_pfs_count"`
	CompletedByPfsCount int64 `json:"completed_by_pfs_count"`
}

// Gets the count of chargebacks passed to PFS and completed by PFS within a specific date window.
// This version uses conditional aggregation for better performance and to avoid ambiguity.
func (q *Queries) GetPFSCountsForWindow(ctx context.Context, arg GetPFSCountsForWindowParams) (GetPFSCountsForWindowRow, error) {
	row := q.db.QueryRow(ctx, getPFSCountsForWindow, arg.PassedToPfsDate, arg.PassedToPfsDate_2)
	var i GetPFSCountsForWindowRow
	err := row.Scan(&i.PassedToPfsCount, &i.CompletedByPfsCount)
	return i, err
}
