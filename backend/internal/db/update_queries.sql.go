// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: update_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const adminUpdateChargeback = `-- name: AdminUpdateChargeback :one
UPDATE chargeback
SET
    current_status = $2,
    reason_code = $3,
    action = $4,
    issue_in_research_date = $5,
    alc_to_rebill = $6,
    tas_to_rebill = $7,
    line_of_accounting_rebill = $8,
    special_instruction = $9,
    passed_to_psf = $10,
    pfs_completion_date = $11,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, reporting_source, fund, business_line, region, location_system, program, al_num, source_num, agreement_num, title, alc, customer_tas, task_subtask, class_id, customer_name, org_code, document_date, accomp_date, assigned_rebill_drn, chargeback_amount, statement, bd_doc_num, vendor, articles_services, current_status, issue_in_research_date, reason_code, action, alc_to_rebill, tas_to_rebill, line_of_accounting_rebill, special_instruction, new_ipac_document_ref, pfs_completion_date, reconciliation_date, chargeback_count, passed_to_psf, created_at, updated_at, is_active
`

type AdminUpdateChargebackParams struct {
	ID                     int64                    `json:"id"`
	CurrentStatus          CdmsStatus               `json:"current_status"`
	ReasonCode             NullChargebackReasonCode `json:"reason_code"`
	Action                 NullChargebackAction     `json:"action"`
	IssueInResearchDate    pgtype.Date              `json:"issue_in_research_date"`
	AlcToRebill            pgtype.Text              `json:"alc_to_rebill"`
	TasToRebill            pgtype.Text              `json:"tas_to_rebill"`
	LineOfAccountingRebill pgtype.Text              `json:"line_of_accounting_rebill"`
	SpecialInstruction     pgtype.Text              `json:"special_instruction"`
	PassedToPsf            pgtype.Date              `json:"passed_to_psf"`
	PfsCompletionDate      pgtype.Date              `json:"pfs_completion_date"`
}

// Updates the admin-modifiable fields of a specific chargeback record
func (q *Queries) AdminUpdateChargeback(ctx context.Context, arg AdminUpdateChargebackParams) (Chargeback, error) {
	row := q.db.QueryRow(ctx, adminUpdateChargeback,
		arg.ID,
		arg.CurrentStatus,
		arg.ReasonCode,
		arg.Action,
		arg.IssueInResearchDate,
		arg.AlcToRebill,
		arg.TasToRebill,
		arg.LineOfAccountingRebill,
		arg.SpecialInstruction,
		arg.PassedToPsf,
		arg.PfsCompletionDate,
	)
	var i Chargeback
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.Fund,
		&i.BusinessLine,
		&i.Region,
		&i.LocationSystem,
		&i.Program,
		&i.AlNum,
		&i.SourceNum,
		&i.AgreementNum,
		&i.Title,
		&i.Alc,
		&i.CustomerTas,
		&i.TaskSubtask,
		&i.ClassID,
		&i.CustomerName,
		&i.OrgCode,
		&i.DocumentDate,
		&i.AccompDate,
		&i.AssignedRebillDrn,
		&i.ChargebackAmount,
		&i.Statement,
		&i.BdDocNum,
		&i.Vendor,
		&i.ArticlesServices,
		&i.CurrentStatus,
		&i.IssueInResearchDate,
		&i.ReasonCode,
		&i.Action,
		&i.AlcToRebill,
		&i.TasToRebill,
		&i.LineOfAccountingRebill,
		&i.SpecialInstruction,
		&i.NewIpacDocumentRef,
		&i.PfsCompletionDate,
		&i.ReconciliationDate,
		&i.ChargebackCount,
		&i.PassedToPsf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const adminUpdateDelinquency = `-- name: AdminUpdateDelinquency :one
UPDATE nonipac
SET
    current_status = $2,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, reporting_source, business_line, billed_total_amount, principle_amount, interest_amount, penalty_amount, administration_charges_amount, debit_outstanding_amount, credit_total_amount, credit_outstanding_amount, title, document_date, address_code, vendor, debt_appeal_forbearance, statement, document_number, vendor_code, collection_due_date, current_status, pfs_poc, gsa_poc, customer_poc, pfs_contacts, open_date, reconciled_date, created_at, updated_at, is_active
`

type AdminUpdateDelinquencyParams struct {
	ID            int64      `json:"id"`
	CurrentStatus CdmsStatus `json:"current_status"`
}

// Updates the admin-modifiable fields of a specific delinquency record
func (q *Queries) AdminUpdateDelinquency(ctx context.Context, arg AdminUpdateDelinquencyParams) (Nonipac, error) {
	row := q.db.QueryRow(ctx, adminUpdateDelinquency, arg.ID, arg.CurrentStatus)
	var i Nonipac
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.BusinessLine,
		&i.BilledTotalAmount,
		&i.PrincipleAmount,
		&i.InterestAmount,
		&i.PenaltyAmount,
		&i.AdministrationChargesAmount,
		&i.DebitOutstandingAmount,
		&i.CreditTotalAmount,
		&i.CreditOutstandingAmount,
		&i.Title,
		&i.DocumentDate,
		&i.AddressCode,
		&i.Vendor,
		&i.DebtAppealForbearance,
		&i.Statement,
		&i.DocumentNumber,
		&i.VendorCode,
		&i.CollectionDueDate,
		&i.CurrentStatus,
		&i.PfsPoc,
		&i.GsaPoc,
		&i.CustomerPoc,
		&i.PfsContacts,
		&i.OpenDate,
		&i.ReconciledDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const pFSUpdateChargeback = `-- name: PFSUpdateChargeback :one
UPDATE chargeback
SET
    current_status = $2,
    passed_to_psf = $3,
    new_ipac_document_ref = $4,
    pfs_completion_date = $5,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, reporting_source, fund, business_line, region, location_system, program, al_num, source_num, agreement_num, title, alc, customer_tas, task_subtask, class_id, customer_name, org_code, document_date, accomp_date, assigned_rebill_drn, chargeback_amount, statement, bd_doc_num, vendor, articles_services, current_status, issue_in_research_date, reason_code, action, alc_to_rebill, tas_to_rebill, line_of_accounting_rebill, special_instruction, new_ipac_document_ref, pfs_completion_date, reconciliation_date, chargeback_count, passed_to_psf, created_at, updated_at, is_active
`

type PFSUpdateChargebackParams struct {
	ID                 int64       `json:"id"`
	CurrentStatus      CdmsStatus  `json:"current_status"`
	PassedToPsf        pgtype.Date `json:"passed_to_psf"`
	NewIpacDocumentRef pgtype.Text `json:"new_ipac_document_ref"`
	PfsCompletionDate  pgtype.Date `json:"pfs_completion_date"`
}

// Updates the user-modifiable fields of a specific chargeback record
func (q *Queries) PFSUpdateChargeback(ctx context.Context, arg PFSUpdateChargebackParams) (Chargeback, error) {
	row := q.db.QueryRow(ctx, pFSUpdateChargeback,
		arg.ID,
		arg.CurrentStatus,
		arg.PassedToPsf,
		arg.NewIpacDocumentRef,
		arg.PfsCompletionDate,
	)
	var i Chargeback
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.Fund,
		&i.BusinessLine,
		&i.Region,
		&i.LocationSystem,
		&i.Program,
		&i.AlNum,
		&i.SourceNum,
		&i.AgreementNum,
		&i.Title,
		&i.Alc,
		&i.CustomerTas,
		&i.TaskSubtask,
		&i.ClassID,
		&i.CustomerName,
		&i.OrgCode,
		&i.DocumentDate,
		&i.AccompDate,
		&i.AssignedRebillDrn,
		&i.ChargebackAmount,
		&i.Statement,
		&i.BdDocNum,
		&i.Vendor,
		&i.ArticlesServices,
		&i.CurrentStatus,
		&i.IssueInResearchDate,
		&i.ReasonCode,
		&i.Action,
		&i.AlcToRebill,
		&i.TasToRebill,
		&i.LineOfAccountingRebill,
		&i.SpecialInstruction,
		&i.NewIpacDocumentRef,
		&i.PfsCompletionDate,
		&i.ReconciliationDate,
		&i.ChargebackCount,
		&i.PassedToPsf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const pFSUpdateDelinquency = `-- name: PFSUpdateDelinquency :one
UPDATE nonipac
SET
    current_status = $2,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, reporting_source, business_line, billed_total_amount, principle_amount, interest_amount, penalty_amount, administration_charges_amount, debit_outstanding_amount, credit_total_amount, credit_outstanding_amount, title, document_date, address_code, vendor, debt_appeal_forbearance, statement, document_number, vendor_code, collection_due_date, current_status, pfs_poc, gsa_poc, customer_poc, pfs_contacts, open_date, reconciled_date, created_at, updated_at, is_active
`

type PFSUpdateDelinquencyParams struct {
	ID            int64      `json:"id"`
	CurrentStatus CdmsStatus `json:"current_status"`
}

// Updates the user-modifiable fields of a specific delinquency record
func (q *Queries) PFSUpdateDelinquency(ctx context.Context, arg PFSUpdateDelinquencyParams) (Nonipac, error) {
	row := q.db.QueryRow(ctx, pFSUpdateDelinquency, arg.ID, arg.CurrentStatus)
	var i Nonipac
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.BusinessLine,
		&i.BilledTotalAmount,
		&i.PrincipleAmount,
		&i.InterestAmount,
		&i.PenaltyAmount,
		&i.AdministrationChargesAmount,
		&i.DebitOutstandingAmount,
		&i.CreditTotalAmount,
		&i.CreditOutstandingAmount,
		&i.Title,
		&i.DocumentDate,
		&i.AddressCode,
		&i.Vendor,
		&i.DebtAppealForbearance,
		&i.Statement,
		&i.DocumentNumber,
		&i.VendorCode,
		&i.CollectionDueDate,
		&i.CurrentStatus,
		&i.PfsPoc,
		&i.GsaPoc,
		&i.CustomerPoc,
		&i.PfsContacts,
		&i.OpenDate,
		&i.ReconciledDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const userUpdateChargeback = `-- name: UserUpdateChargeback :one
UPDATE chargeback
SET
    current_status = $2,
    reason_code = $3,
    action = $4,
    issue_in_research_date = $5,
    alc_to_rebill = $6,
    tas_to_rebill = $7,
    line_of_accounting_rebill = $8,
    special_instruction = $9,
    passed_to_psf = $10,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, reporting_source, fund, business_line, region, location_system, program, al_num, source_num, agreement_num, title, alc, customer_tas, task_subtask, class_id, customer_name, org_code, document_date, accomp_date, assigned_rebill_drn, chargeback_amount, statement, bd_doc_num, vendor, articles_services, current_status, issue_in_research_date, reason_code, action, alc_to_rebill, tas_to_rebill, line_of_accounting_rebill, special_instruction, new_ipac_document_ref, pfs_completion_date, reconciliation_date, chargeback_count, passed_to_psf, created_at, updated_at, is_active
`

type UserUpdateChargebackParams struct {
	ID                     int64                    `json:"id"`
	CurrentStatus          CdmsStatus               `json:"current_status"`
	ReasonCode             NullChargebackReasonCode `json:"reason_code"`
	Action                 NullChargebackAction     `json:"action"`
	IssueInResearchDate    pgtype.Date              `json:"issue_in_research_date"`
	AlcToRebill            pgtype.Text              `json:"alc_to_rebill"`
	TasToRebill            pgtype.Text              `json:"tas_to_rebill"`
	LineOfAccountingRebill pgtype.Text              `json:"line_of_accounting_rebill"`
	SpecialInstruction     pgtype.Text              `json:"special_instruction"`
	PassedToPsf            pgtype.Date              `json:"passed_to_psf"`
}

// Updates the user-modifiable fields of a specific chargeback record
func (q *Queries) UserUpdateChargeback(ctx context.Context, arg UserUpdateChargebackParams) (Chargeback, error) {
	row := q.db.QueryRow(ctx, userUpdateChargeback,
		arg.ID,
		arg.CurrentStatus,
		arg.ReasonCode,
		arg.Action,
		arg.IssueInResearchDate,
		arg.AlcToRebill,
		arg.TasToRebill,
		arg.LineOfAccountingRebill,
		arg.SpecialInstruction,
		arg.PassedToPsf,
	)
	var i Chargeback
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.Fund,
		&i.BusinessLine,
		&i.Region,
		&i.LocationSystem,
		&i.Program,
		&i.AlNum,
		&i.SourceNum,
		&i.AgreementNum,
		&i.Title,
		&i.Alc,
		&i.CustomerTas,
		&i.TaskSubtask,
		&i.ClassID,
		&i.CustomerName,
		&i.OrgCode,
		&i.DocumentDate,
		&i.AccompDate,
		&i.AssignedRebillDrn,
		&i.ChargebackAmount,
		&i.Statement,
		&i.BdDocNum,
		&i.Vendor,
		&i.ArticlesServices,
		&i.CurrentStatus,
		&i.IssueInResearchDate,
		&i.ReasonCode,
		&i.Action,
		&i.AlcToRebill,
		&i.TasToRebill,
		&i.LineOfAccountingRebill,
		&i.SpecialInstruction,
		&i.NewIpacDocumentRef,
		&i.PfsCompletionDate,
		&i.ReconciliationDate,
		&i.ChargebackCount,
		&i.PassedToPsf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const userUpdateDelinquency = `-- name: UserUpdateDelinquency :one
UPDATE nonipac
SET
    current_status = $2,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, reporting_source, business_line, billed_total_amount, principle_amount, interest_amount, penalty_amount, administration_charges_amount, debit_outstanding_amount, credit_total_amount, credit_outstanding_amount, title, document_date, address_code, vendor, debt_appeal_forbearance, statement, document_number, vendor_code, collection_due_date, current_status, pfs_poc, gsa_poc, customer_poc, pfs_contacts, open_date, reconciled_date, created_at, updated_at, is_active
`

type UserUpdateDelinquencyParams struct {
	ID            int64      `json:"id"`
	CurrentStatus CdmsStatus `json:"current_status"`
}

// Updates the user-modifiable fields of a specific delinquency record
func (q *Queries) UserUpdateDelinquency(ctx context.Context, arg UserUpdateDelinquencyParams) (Nonipac, error) {
	row := q.db.QueryRow(ctx, userUpdateDelinquency, arg.ID, arg.CurrentStatus)
	var i Nonipac
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.BusinessLine,
		&i.BilledTotalAmount,
		&i.PrincipleAmount,
		&i.InterestAmount,
		&i.PenaltyAmount,
		&i.AdministrationChargesAmount,
		&i.DebitOutstandingAmount,
		&i.CreditTotalAmount,
		&i.CreditOutstandingAmount,
		&i.Title,
		&i.DocumentDate,
		&i.AddressCode,
		&i.Vendor,
		&i.DebtAppealForbearance,
		&i.Statement,
		&i.DocumentNumber,
		&i.VendorCode,
		&i.CollectionDueDate,
		&i.CurrentStatus,
		&i.PfsPoc,
		&i.GsaPoc,
		&i.CustomerPoc,
		&i.PfsContacts,
		&i.OpenDate,
		&i.ReconciledDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
