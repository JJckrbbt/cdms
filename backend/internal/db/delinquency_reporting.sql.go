// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: delinquency_reporting.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getNonipacAgingScheduleByBusinessLine = `-- name: GetNonipacAgingScheduleByBusinessLine :many
SELECT
    business_line,
    COUNT(*) FILTER (WHERE days_old <= 180) AS "less_than_180_days_count",
    COALESCE(SUM(abs_amount) FILTER (WHERE days_old <= 180), 0)::NUMERIC(12, 2)::TEXT AS "less_than_180_days_value",
    COUNT(*) FILTER (WHERE days_old BETWEEN 181 AND 365) AS "181_to_365_days_count",
    COALESCE(SUM(abs_amount) FILTER (WHERE days_old BETWEEN 181 AND 365), 0)::NUMERIC(12, 2)::TEXT AS "181_to_365_days_value",
    COUNT(*) FILTER (WHERE days_old BETWEEN 366 AND 730) AS "one_to_two_years_count",
    COALESCE(SUM(abs_amount) FILTER (WHERE days_old BETWEEN 366 AND 730), 0)::NUMERIC(12, 2)::TEXT AS "one_to_two_years_value",
    COUNT(*) FILTER (WHERE days_old > 730) AS "over_two_years_count",
    COALESCE(SUM(abs_amount) FILTER (WHERE days_old > 730), 0)::NUMERIC(12, 2)::TEXT AS "over_two_years_value",
    COUNT(*) AS "total_count",
    SUM(abs_amount)::NUMERIC(12, 2)::TEXT AS "total_value"
FROM
    historical_nonipac_with_vendor_info
WHERE
    is_active = TRUE AND current_status != 'Reconciled - Off Report' -- Filter for active, non-reconciled items
GROUP BY
    business_line
ORDER BY
    business_line
`

type GetNonipacAgingScheduleByBusinessLineRow struct {
	BusinessLine         ChargebackBusinessLine `json:"business_line"`
	LessThan180DaysCount int64                  `json:"less_than_180_days_count"`
	LessThan180DaysValue string                 `json:"less_than_180_days_value"`
	_181To365DaysCount   int64                  `json:"181_to_365_days_count"`
	_181To365DaysValue   string                 `json:"181_to_365_days_value"`
	OneToTwoYearsCount   int64                  `json:"one_to_two_years_count"`
	OneToTwoYearsValue   string                 `json:"one_to_two_years_value"`
	OverTwoYearsCount    int64                  `json:"over_two_years_count"`
	OverTwoYearsValue    string                 `json:"over_two_years_value"`
	TotalCount           int64                  `json:"total_count"`
	TotalValue           string                 `json:"total_value"`
}

// Provides an aging schedule for active nonipac items, broken down by business line and age categories.
func (q *Queries) GetNonipacAgingScheduleByBusinessLine(ctx context.Context) ([]GetNonipacAgingScheduleByBusinessLineRow, error) {
	rows, err := q.db.Query(ctx, getNonipacAgingScheduleByBusinessLine)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNonipacAgingScheduleByBusinessLineRow
	for rows.Next() {
		var i GetNonipacAgingScheduleByBusinessLineRow
		if err := rows.Scan(
			&i.BusinessLine,
			&i.LessThan180DaysCount,
			&i.LessThan180DaysValue,
			&i._181To365DaysCount,
			&i._181To365DaysValue,
			&i.OneToTwoYearsCount,
			&i.OneToTwoYearsValue,
			&i.OverTwoYearsCount,
			&i.OverTwoYearsValue,
			&i.TotalCount,
			&i.TotalValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNonipacStatusSummary = `-- name: GetNonipacStatusSummary :many
SELECT
    current_status,
    COUNT(*) AS status_count,
    SUM(abs_amount)::NUMERIC AS total_value,
    (SUM(abs_amount) * 100.0 / SUM(SUM(abs_amount)) OVER ())::NUMERIC(5, 2) AS percentage_of_total
FROM
    historical_nonipac_with_vendor_info
WHERE
    is_active = TRUE AND current_status != 'Reconciled - Off Report' -- Exclude inactive and reconciled items
GROUP BY
    current_status
ORDER BY
    current_status
`

type GetNonipacStatusSummaryRow struct {
	CurrentStatus     CdmsStatus     `json:"current_status"`
	StatusCount       int64          `json:"status_count"`
	TotalValue        pgtype.Numeric `json:"total_value"`
	PercentageOfTotal pgtype.Numeric `json:"percentage_of_total"`
}

// Gets the count, total value, and percentage of total value for each nonipac status for active items.
func (q *Queries) GetNonipacStatusSummary(ctx context.Context) ([]GetNonipacStatusSummaryRow, error) {
	rows, err := q.db.Query(ctx, getNonipacStatusSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNonipacStatusSummaryRow
	for rows.Next() {
		var i GetNonipacStatusSummaryRow
		if err := rows.Scan(
			&i.CurrentStatus,
			&i.StatusCount,
			&i.TotalValue,
			&i.PercentageOfTotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
