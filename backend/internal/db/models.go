// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CdmsStatus string

const (
	CdmsStatusOpen                               CdmsStatus = "Open"
	CdmsStatusHoldPendingExternalAction          CdmsStatus = "Hold Pending External Action"
	CdmsStatusHoldPendingInternalAction          CdmsStatus = "Hold Pending Internal Action"
	CdmsStatusInResearch                         CdmsStatus = "In Research"
	CdmsStatusPassedtoPFS                        CdmsStatus = "Passed to PFS"
	CdmsStatusCompletedbyPFS                     CdmsStatus = "Completed by PFS"
	CdmsStatusPFSReturntoGSA                     CdmsStatus = "PFS Return to GSA"
	CdmsStatusReconciledOffReport                CdmsStatus = "Reconciled - Off Report"
	CdmsStatusRefund                             CdmsStatus = "Refund"
	CdmsStatusOffset                             CdmsStatus = "Offset"
	CdmsStatusInProcess                          CdmsStatus = "In Process"
	CdmsStatusWriteOff                           CdmsStatus = "Write Off"
	CdmsStatusReferredtoTreasuryforCollections   CdmsStatus = "Referred to Treasury for Collections"
	CdmsStatusReturnCredittoTreasury             CdmsStatus = "Return Credit to Treasury"
	CdmsStatusWaitingonCustomerResponse          CdmsStatus = "Waiting on Customer Response"
	CdmsStatusWaitingonGSAResponsePendingPayment CdmsStatus = "Waiting on GSA Response Pending Payment"
	CdmsStatusClosedPaymentReceived              CdmsStatus = "Closed - Payment Received"
	CdmsStatusReversetoIncome                    CdmsStatus = "Reverse to Income"
	CdmsStatusBillasIPAC                         CdmsStatus = "Bill as IPAC"
	CdmsStatusBillasDoD                          CdmsStatus = "Bill as DoD"
	CdmsStatusEISIssues                          CdmsStatus = "EIS Issues"
)

func (e *CdmsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CdmsStatus(s)
	case string:
		*e = CdmsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CdmsStatus: %T", src)
	}
	return nil
}

type NullCdmsStatus struct {
	CdmsStatus CdmsStatus `json:"cdms_status"`
	Valid      bool       `json:"valid"` // Valid is true if CdmsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCdmsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CdmsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CdmsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCdmsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CdmsStatus), nil
}

type ChargebackAction string

const (
	ChargebackActionRebill                      ChargebackAction = "Rebill"
	ChargebackActionReversetoIncome             ChargebackAction = "Reverse to Income"
	ChargebackActionReversetoIncomeGSARebill    ChargebackAction = "Reverse to Income & GSA Rebill"
	ChargebackActionWriteOff                    ChargebackAction = "Write Off"
	ChargebackActionReturntoTreasury            ChargebackAction = "Return to Treasury"
	ChargebackActionOtherSeeSpecialInstructions ChargebackAction = "Other - See Special Instructions"
)

func (e *ChargebackAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChargebackAction(s)
	case string:
		*e = ChargebackAction(s)
	default:
		return fmt.Errorf("unsupported scan type for ChargebackAction: %T", src)
	}
	return nil
}

type NullChargebackAction struct {
	ChargebackAction ChargebackAction `json:"chargeback_action"`
	Valid            bool             `json:"valid"` // Valid is true if ChargebackAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChargebackAction) Scan(value interface{}) error {
	if value == nil {
		ns.ChargebackAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChargebackAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChargebackAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChargebackAction), nil
}

type ChargebackBusinessLine string

const (
	ChargebackBusinessLineProcurement ChargebackBusinessLine = "Procurement"
	ChargebackBusinessLineOperations  ChargebackBusinessLine = "Operations"
	ChargebackBusinessLineResearchDev ChargebackBusinessLine = "Research & Dev"
	ChargebackBusinessLineITServices  ChargebackBusinessLine = "IT Services"
	ChargebackBusinessLineLogistics   ChargebackBusinessLine = "Logistics"
	ChargebackBusinessLineAdmin       ChargebackBusinessLine = "Admin"
	ChargebackBusinessLineCars        ChargebackBusinessLine = "Cars"
	ChargebackBusinessLineRent        ChargebackBusinessLine = "Rent"
	ChargebackBusinessLineCredit      ChargebackBusinessLine = "Credit"
	ChargebackBusinessLineHotels      ChargebackBusinessLine = "Hotels"
	ChargebackBusinessLineGrocery     ChargebackBusinessLine = "Grocery"
)

func (e *ChargebackBusinessLine) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChargebackBusinessLine(s)
	case string:
		*e = ChargebackBusinessLine(s)
	default:
		return fmt.Errorf("unsupported scan type for ChargebackBusinessLine: %T", src)
	}
	return nil
}

type NullChargebackBusinessLine struct {
	ChargebackBusinessLine ChargebackBusinessLine `json:"chargeback_business_line"`
	Valid                  bool                   `json:"valid"` // Valid is true if ChargebackBusinessLine is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChargebackBusinessLine) Scan(value interface{}) error {
	if value == nil {
		ns.ChargebackBusinessLine, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChargebackBusinessLine.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChargebackBusinessLine) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChargebackBusinessLine), nil
}

type ChargebackFund string

const (
	ChargebackFundF100 ChargebackFund = "F-100"
	ChargebackFundF201 ChargebackFund = "F-201"
	ChargebackFundF305 ChargebackFund = "F-305"
	ChargebackFundF410 ChargebackFund = "F-410"
	ChargebackFundF501 ChargebackFund = "F-501"
)

func (e *ChargebackFund) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChargebackFund(s)
	case string:
		*e = ChargebackFund(s)
	default:
		return fmt.Errorf("unsupported scan type for ChargebackFund: %T", src)
	}
	return nil
}

type NullChargebackFund struct {
	ChargebackFund ChargebackFund `json:"chargeback_fund"`
	Valid          bool           `json:"valid"` // Valid is true if ChargebackFund is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChargebackFund) Scan(value interface{}) error {
	if value == nil {
		ns.ChargebackFund, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChargebackFund.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChargebackFund) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChargebackFund), nil
}

type ChargebackReasonCode string

const (
	ChargebackReasonCodeIncorrectALC                                   ChargebackReasonCode = "Incorrect ALC"
	ChargebackReasonCodeIncorrectTAS                                   ChargebackReasonCode = "Incorrect TAS"
	ChargebackReasonCodeIncorrectLOA                                   ChargebackReasonCode = "Incorrect LOA"
	ChargebackReasonCodeNeedSupportingDocumentation                    ChargebackReasonCode = "Need Supporting Documentation"
	ChargebackReasonCodeNoFundsAvailable                               ChargebackReasonCode = "No Funds Available"
	ChargebackReasonCodeBilledWrongAmount                              ChargebackReasonCode = "Billed Wrong Amount"
	ChargebackReasonCodeBillExceedsAuthorizedAmount                    ChargebackReasonCode = "Bill Exceeds Authorized Amount"
	ChargebackReasonCodeFundsExpired                                   ChargebackReasonCode = "Funds Expired"
	ChargebackReasonCodeBilledGoodsorServicesUnsatisfactoryNotReceived ChargebackReasonCode = "Billed Goods or Services Unsatisfactory/Not Received"
	ChargebackReasonCodeMissingCustomerOrderNumber                     ChargebackReasonCode = "Missing Customer Order Number"
	ChargebackReasonCodeBilledIncorrectMethod                          ChargebackReasonCode = "Billed Incorrect Method"
	ChargebackReasonCodePOCanceledorEnded                              ChargebackReasonCode = "PO Canceled or Ended"
	ChargebackReasonCodeEndofMonthRejection                            ChargebackReasonCode = "End of Month Rejection"
	ChargebackReasonCodeNoorIncorrectFSN                               ChargebackReasonCode = "No or Incorrect FSN"
	ChargebackReasonCodeCustomerBillingOfficeClosureReorg              ChargebackReasonCode = "Customer Billing Office Closure/Reorg"
	ChargebackReasonCodeOtherMultiple                                  ChargebackReasonCode = "Other/Multiple"
	ChargebackReasonCodeFundsNotObligatedbyClient                      ChargebackReasonCode = "Funds Not Obligated by Client"
	ChargebackReasonCodeSpeedpaynotupdated                             ChargebackReasonCode = "Speedpay not updated"
	ChargebackReasonCodeCOVID19AgencyPickupDelay                       ChargebackReasonCode = "COVID-19 Agency Pickup Delay"
	ChargebackReasonCodeMileageBillingErrors                           ChargebackReasonCode = "Mileage Billing Errors"
	ChargebackReasonCodeBETCUpdateNeeded                               ChargebackReasonCode = "BETC Update Needed"
	ChargebackReasonCodeEISIssues                                      ChargebackReasonCode = "EIS Issues"
	ChargebackReasonCodeWrongPCCode                                    ChargebackReasonCode = "Wrong PC Code"
	ChargebackReasonCodeWalletnotupdated                               ChargebackReasonCode = "Wallet not updated"
)

func (e *ChargebackReasonCode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChargebackReasonCode(s)
	case string:
		*e = ChargebackReasonCode(s)
	default:
		return fmt.Errorf("unsupported scan type for ChargebackReasonCode: %T", src)
	}
	return nil
}

type NullChargebackReasonCode struct {
	ChargebackReasonCode ChargebackReasonCode `json:"chargeback_reason_code"`
	Valid                bool                 `json:"valid"` // Valid is true if ChargebackReasonCode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChargebackReasonCode) Scan(value interface{}) error {
	if value == nil {
		ns.ChargebackReasonCode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChargebackReasonCode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChargebackReasonCode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChargebackReasonCode), nil
}

type ChargebackReportingSource string

const (
	ChargebackReportingSourceBC1048             ChargebackReportingSource = "BC1048"
	ChargebackReportingSourceBC1300             ChargebackReportingSource = "BC1300"
	ChargebackReportingSourceApplicationCreated ChargebackReportingSource = "ApplicationCreated"
)

func (e *ChargebackReportingSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChargebackReportingSource(s)
	case string:
		*e = ChargebackReportingSource(s)
	default:
		return fmt.Errorf("unsupported scan type for ChargebackReportingSource: %T", src)
	}
	return nil
}

type NullChargebackReportingSource struct {
	ChargebackReportingSource ChargebackReportingSource `json:"chargeback_reporting_source"`
	Valid                     bool                      `json:"valid"` // Valid is true if ChargebackReportingSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChargebackReportingSource) Scan(value interface{}) error {
	if value == nil {
		ns.ChargebackReportingSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChargebackReportingSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChargebackReportingSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChargebackReportingSource), nil
}

type NonipacReportingSource string

const (
	NonipacReportingSourceApplicationCreated NonipacReportingSource = "ApplicationCreated"
	NonipacReportingSourceOUTSTANDINGBILLS   NonipacReportingSource = "OUTSTANDING_BILLS"
)

func (e *NonipacReportingSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NonipacReportingSource(s)
	case string:
		*e = NonipacReportingSource(s)
	default:
		return fmt.Errorf("unsupported scan type for NonipacReportingSource: %T", src)
	}
	return nil
}

type NullNonipacReportingSource struct {
	NonipacReportingSource NonipacReportingSource `json:"nonipac_reporting_source"`
	Valid                  bool                   `json:"valid"` // Valid is true if NonipacReportingSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNonipacReportingSource) Scan(value interface{}) error {
	if value == nil {
		ns.NonipacReportingSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NonipacReportingSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNonipacReportingSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NonipacReportingSource), nil
}

type StatusHistoryStatus string

const (
	StatusHistoryStatusOpen                               StatusHistoryStatus = "Open"
	StatusHistoryStatusHoldPendingExternalAction          StatusHistoryStatus = "Hold Pending External Action"
	StatusHistoryStatusHoldPendingInternalAction          StatusHistoryStatus = "Hold Pending Internal Action"
	StatusHistoryStatusInResearch                         StatusHistoryStatus = "In Research"
	StatusHistoryStatusPassedtoPFS                        StatusHistoryStatus = "Passed to PFS"
	StatusHistoryStatusCompletedbyPFS                     StatusHistoryStatus = "Completed by PFS"
	StatusHistoryStatusPFSReturntoGSA                     StatusHistoryStatus = "PFS Return to GSA"
	StatusHistoryStatusRefund                             StatusHistoryStatus = "Refund"
	StatusHistoryStatusOffset                             StatusHistoryStatus = "Offset"
	StatusHistoryStatusInProcess                          StatusHistoryStatus = "In Process"
	StatusHistoryStatusWriteOff                           StatusHistoryStatus = "Write Off"
	StatusHistoryStatusReferredtoTreasuryforCollections   StatusHistoryStatus = "Referred to Treasury for Collections"
	StatusHistoryStatusReturnCredittoTreasury             StatusHistoryStatus = "Return Credit to Treasury"
	StatusHistoryStatusWaitingonCustomerResponse          StatusHistoryStatus = "Waiting on Customer Response"
	StatusHistoryStatusWaitingonGSAResponsePendingPayment StatusHistoryStatus = "Waiting on GSA Response Pending Payment"
	StatusHistoryStatusClosedPaymentReceived              StatusHistoryStatus = "Closed - Payment Received"
	StatusHistoryStatusReversetoIncome                    StatusHistoryStatus = "Reverse to Income"
	StatusHistoryStatusBillasIPAC                         StatusHistoryStatus = "Bill as IPAC"
	StatusHistoryStatusBillasDoD                          StatusHistoryStatus = "Bill as DoD"
	StatusHistoryStatusEISIssues                          StatusHistoryStatus = "EIS Issues"
)

func (e *StatusHistoryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusHistoryStatus(s)
	case string:
		*e = StatusHistoryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusHistoryStatus: %T", src)
	}
	return nil
}

type NullStatusHistoryStatus struct {
	StatusHistoryStatus StatusHistoryStatus `json:"status_history_status"`
	Valid               bool                `json:"valid"` // Valid is true if StatusHistoryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusHistoryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StatusHistoryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusHistoryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusHistoryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusHistoryStatus), nil
}

type UserOrg string

const (
	UserOrgGSA UserOrg = "GSA"
	UserOrgPFS UserOrg = "PFS"
)

func (e *UserOrg) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserOrg(s)
	case string:
		*e = UserOrg(s)
	default:
		return fmt.Errorf("unsupported scan type for UserOrg: %T", src)
	}
	return nil
}

type NullUserOrg struct {
	UserOrg UserOrg `json:"user_org"`
	Valid   bool    `json:"valid"` // Valid is true if UserOrg is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserOrg) Scan(value interface{}) error {
	if value == nil {
		ns.UserOrg, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserOrg.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserOrg) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserOrg), nil
}

type ActiveChargebacksWithVendorInfo struct {
	ID                     int64                     `json:"id"`
	ReportingSource        ChargebackReportingSource `json:"reporting_source"`
	Fund                   ChargebackFund            `json:"fund"`
	BusinessLine           ChargebackBusinessLine    `json:"business_line"`
	Region                 int16                     `json:"region"`
	LocationSystem         pgtype.Text               `json:"location_system"`
	Program                string                    `json:"program"`
	AlNum                  int16                     `json:"al_num"`
	SourceNum              string                    `json:"source_num"`
	AgreementNum           pgtype.Text               `json:"agreement_num"`
	Title                  pgtype.Text               `json:"title"`
	Alc                    string                    `json:"alc"`
	CustomerTas            string                    `json:"customer_tas"`
	TaskSubtask            string                    `json:"task_subtask"`
	ClassID                pgtype.Text               `json:"class_id"`
	CustomerName           string                    `json:"customer_name"`
	OrgCode                string                    `json:"org_code"`
	DocumentDate           pgtype.Date               `json:"document_date"`
	AccompDate             pgtype.Date               `json:"accomp_date"`
	AssignedRebillDrn      pgtype.Text               `json:"assigned_rebill_drn"`
	ChargebackAmount       pgtype.Numeric            `json:"chargeback_amount"`
	Statement              string                    `json:"statement"`
	BdDocNum               string                    `json:"bd_doc_num"`
	Vendor                 string                    `json:"vendor"`
	ArticlesServices       pgtype.Text               `json:"articles_services"`
	CurrentStatus          CdmsStatus                `json:"current_status"`
	ReasonCode             NullChargebackReasonCode  `json:"reason_code"`
	Action                 NullChargebackAction      `json:"action"`
	AlcToRebill            pgtype.Text               `json:"alc_to_rebill"`
	TasToRebill            pgtype.Text               `json:"tas_to_rebill"`
	LineOfAccountingRebill pgtype.Text               `json:"line_of_accounting_rebill"`
	SpecialInstruction     pgtype.Text               `json:"special_instruction"`
	NewIpacDocumentRef     pgtype.Text               `json:"new_ipac_document_ref"`
	CreatedAt              pgtype.Timestamptz        `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz        `json:"updated_at"`
	IsActive               bool                      `json:"is_active"`
	DaysOld                interface{}               `json:"days_old"`
	AgencyID               string                    `json:"agency_id"`
	BureauCode             string                    `json:"bureau_code"`
}

type ActiveNonipacWithVendorInfo struct {
	ID                          int64                  `json:"id"`
	ReportingSource             NonipacReportingSource `json:"reporting_source"`
	BusinessLine                ChargebackBusinessLine `json:"business_line"`
	BilledTotalAmount           pgtype.Numeric         `json:"billed_total_amount"`
	PrincipleAmount             pgtype.Numeric         `json:"principle_amount"`
	InterestAmount              pgtype.Numeric         `json:"interest_amount"`
	PenaltyAmount               pgtype.Numeric         `json:"penalty_amount"`
	AdministrationChargesAmount pgtype.Numeric         `json:"administration_charges_amount"`
	DebitOutstandingAmount      pgtype.Numeric         `json:"debit_outstanding_amount"`
	CreditTotalAmount           pgtype.Numeric         `json:"credit_total_amount"`
	CreditOutstandingAmount     pgtype.Numeric         `json:"credit_outstanding_amount"`
	Title                       pgtype.Text            `json:"title"`
	DocumentDate                pgtype.Date            `json:"document_date"`
	AddressCode                 string                 `json:"address_code"`
	Vendor                      string                 `json:"vendor"`
	DebtAppealForbearance       bool                   `json:"debt_appeal_forbearance"`
	Statement                   string                 `json:"statement"`
	DocumentNumber              string                 `json:"document_number"`
	VendorCode                  string                 `json:"vendor_code"`
	CollectionDueDate           pgtype.Date            `json:"collection_due_date"`
	CurrentStatus               CdmsStatus             `json:"current_status"`
	PfsPoc                      pgtype.Int8            `json:"pfs_poc"`
	GsaPoc                      pgtype.Int8            `json:"gsa_poc"`
	CustomerPoc                 pgtype.Int8            `json:"customer_poc"`
	PfsContacts                 pgtype.Int2            `json:"pfs_contacts"`
	OpenDate                    pgtype.Date            `json:"open_date"`
	ReconciledDate              pgtype.Date            `json:"reconciled_date"`
	CreatedAt                   pgtype.Timestamptz     `json:"created_at"`
	UpdatedAt                   pgtype.Timestamptz     `json:"updated_at"`
	IsActive                    bool                   `json:"is_active"`
	DaysOld                     interface{}            `json:"days_old"`
	AgencyID                    string                 `json:"agency_id"`
	BureauCode                  string                 `json:"bureau_code"`
}

type AgencyBureau struct {
	Agency     string             `json:"agency"`
	BureauCode string             `json:"bureau_code"`
	VendorCode string             `json:"vendor_code"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type AuditCdmsUserChange struct {
	AuditID   int64              `json:"audit_id"`
	TargetID  int64              `json:"target_id"`
	Operation string             `json:"operation"`
	ChangedBy pgtype.Int8        `json:"changed_by"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
	OldData   []byte             `json:"old_data"`
	NewData   []byte             `json:"new_data"`
}

type AuditChargebackChange struct {
	AuditID   int64              `json:"audit_id"`
	TargetID  int64              `json:"target_id"`
	Operation string             `json:"operation"`
	ChangedBy pgtype.Int8        `json:"changed_by"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
	OldData   []byte             `json:"old_data"`
	NewData   []byte             `json:"new_data"`
}

type AuditNonipacChange struct {
	AuditID   int64              `json:"audit_id"`
	TargetID  int64              `json:"target_id"`
	Operation string             `json:"operation"`
	ChangedBy pgtype.Int8        `json:"changed_by"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
	OldData   []byte             `json:"old_data"`
	NewData   []byte             `json:"new_data"`
}

type CdmsUser struct {
	ID                  int64              `json:"id"`
	AuthProviderSubject string             `json:"auth_provider_subject"`
	Email               string             `json:"email"`
	FirstName           string             `json:"first_name"`
	LastName            string             `json:"last_name"`
	Org                 UserOrg            `json:"org"`
	IsActive            bool               `json:"is_active"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
}

type Chargeback struct {
	ID                     int64                     `json:"id"`
	ReportingSource        ChargebackReportingSource `json:"reporting_source"`
	Fund                   ChargebackFund            `json:"fund"`
	BusinessLine           ChargebackBusinessLine    `json:"business_line"`
	Region                 int16                     `json:"region"`
	LocationSystem         pgtype.Text               `json:"location_system"`
	Program                string                    `json:"program"`
	AlNum                  int16                     `json:"al_num"`
	SourceNum              string                    `json:"source_num"`
	AgreementNum           pgtype.Text               `json:"agreement_num"`
	Title                  pgtype.Text               `json:"title"`
	Alc                    string                    `json:"alc"`
	CustomerTas            string                    `json:"customer_tas"`
	TaskSubtask            string                    `json:"task_subtask"`
	ClassID                pgtype.Text               `json:"class_id"`
	CustomerName           string                    `json:"customer_name"`
	OrgCode                string                    `json:"org_code"`
	DocumentDate           pgtype.Date               `json:"document_date"`
	AccompDate             pgtype.Date               `json:"accomp_date"`
	AssignedRebillDrn      pgtype.Text               `json:"assigned_rebill_drn"`
	ChargebackAmount       pgtype.Numeric            `json:"chargeback_amount"`
	Statement              string                    `json:"statement"`
	BdDocNum               string                    `json:"bd_doc_num"`
	Vendor                 string                    `json:"vendor"`
	ArticlesServices       pgtype.Text               `json:"articles_services"`
	CurrentStatus          CdmsStatus                `json:"current_status"`
	ReasonCode             NullChargebackReasonCode  `json:"reason_code"`
	Action                 NullChargebackAction      `json:"action"`
	AlcToRebill            pgtype.Text               `json:"alc_to_rebill"`
	TasToRebill            pgtype.Text               `json:"tas_to_rebill"`
	LineOfAccountingRebill pgtype.Text               `json:"line_of_accounting_rebill"`
	SpecialInstruction     pgtype.Text               `json:"special_instruction"`
	NewIpacDocumentRef     pgtype.Text               `json:"new_ipac_document_ref"`
	CreatedAt              pgtype.Timestamptz        `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz        `json:"updated_at"`
	IsActive               bool                      `json:"is_active"`
}

type ChargebackCommentsMerge struct {
	ChargebackID int64 `json:"chargeback_id"`
	CommentID    int64 `json:"comment_id"`
}

type ChargebackCustomerPocMerge struct {
	ChargebackID  int64 `json:"chargeback_id"`
	CustomerPocID int64 `json:"customer_poc_id"`
}

type ChargebackStatusMerge struct {
	ChargebackID    int64 `json:"chargeback_id"`
	StatusHistoryID int64 `json:"status_history_id"`
}

type Comment struct {
	ID          int64              `json:"id"`
	Comment     string             `json:"comment"`
	CommentDate pgtype.Timestamptz `json:"comment_date"`
	UserID      int64              `json:"user_id"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type CommentMention struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

type CustomerPoc struct {
	ID        int64              `json:"id"`
	FirstName string             `json:"first_name"`
	LastName  string             `json:"last_name"`
	Email     pgtype.Text        `json:"email"`
	Phone     pgtype.Text        `json:"phone"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	IsActive  bool               `json:"is_active"`
}

type HistoricalChargebacksWithVendorInfo struct {
	ID                     int64                     `json:"id"`
	IsActive               bool                      `json:"is_active"`
	ReportingSource        ChargebackReportingSource `json:"reporting_source"`
	Fund                   ChargebackFund            `json:"fund"`
	BusinessLine           ChargebackBusinessLine    `json:"business_line"`
	Region                 int16                     `json:"region"`
	LocationSystem         pgtype.Text               `json:"location_system"`
	Program                string                    `json:"program"`
	AlNum                  int16                     `json:"al_num"`
	SourceNum              string                    `json:"source_num"`
	AgreementNum           pgtype.Text               `json:"agreement_num"`
	Title                  pgtype.Text               `json:"title"`
	Alc                    string                    `json:"alc"`
	CustomerTas            string                    `json:"customer_tas"`
	TaskSubtask            string                    `json:"task_subtask"`
	ClassID                pgtype.Text               `json:"class_id"`
	CustomerName           string                    `json:"customer_name"`
	OrgCode                string                    `json:"org_code"`
	DocumentDate           pgtype.Date               `json:"document_date"`
	AccompDate             pgtype.Date               `json:"accomp_date"`
	AssignedRebillDrn      pgtype.Text               `json:"assigned_rebill_drn"`
	ChargebackAmount       pgtype.Numeric            `json:"chargeback_amount"`
	Statement              string                    `json:"statement"`
	BdDocNum               string                    `json:"bd_doc_num"`
	Vendor                 string                    `json:"vendor"`
	ArticlesServices       pgtype.Text               `json:"articles_services"`
	CurrentStatus          CdmsStatus                `json:"current_status"`
	ReasonCode             NullChargebackReasonCode  `json:"reason_code"`
	Action                 NullChargebackAction      `json:"action"`
	AlcToRebill            pgtype.Text               `json:"alc_to_rebill"`
	TasToRebill            pgtype.Text               `json:"tas_to_rebill"`
	LineOfAccountingRebill pgtype.Text               `json:"line_of_accounting_rebill"`
	SpecialInstruction     pgtype.Text               `json:"special_instruction"`
	NewIpacDocumentRef     pgtype.Text               `json:"new_ipac_document_ref"`
	CreatedAt              pgtype.Timestamptz        `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz        `json:"updated_at"`
	IssueInResearchDate    interface{}               `json:"issue_in_research_date"`
	PassedToPfsDate        interface{}               `json:"passed_to_pfs_date"`
	PfsCompletionDate      interface{}               `json:"pfs_completion_date"`
	AgencyID               string                    `json:"agency_id"`
	BureauCode             string                    `json:"bureau_code"`
	DaysOld                interface{}               `json:"days_old"`
	AbsAmount              int64                     `json:"abs_amount"`
	DaysOpenToPfs          int32                     `json:"days_open_to_pfs"`
	DaysPfsToComplete      int32                     `json:"days_pfs_to_complete"`
	DaysComplete           int32                     `json:"days_complete"`
}

type HistoricalNonipacWithVendorInfo struct {
	ID                          int64                  `json:"id"`
	ReportingSource             NonipacReportingSource `json:"reporting_source"`
	BusinessLine                ChargebackBusinessLine `json:"business_line"`
	BilledTotalAmount           pgtype.Numeric         `json:"billed_total_amount"`
	PrincipleAmount             pgtype.Numeric         `json:"principle_amount"`
	InterestAmount              pgtype.Numeric         `json:"interest_amount"`
	PenaltyAmount               pgtype.Numeric         `json:"penalty_amount"`
	AdministrationChargesAmount pgtype.Numeric         `json:"administration_charges_amount"`
	DebitOutstandingAmount      pgtype.Numeric         `json:"debit_outstanding_amount"`
	CreditTotalAmount           pgtype.Numeric         `json:"credit_total_amount"`
	CreditOutstandingAmount     pgtype.Numeric         `json:"credit_outstanding_amount"`
	Title                       pgtype.Text            `json:"title"`
	DocumentDate                pgtype.Date            `json:"document_date"`
	AddressCode                 string                 `json:"address_code"`
	Vendor                      string                 `json:"vendor"`
	DebtAppealForbearance       bool                   `json:"debt_appeal_forbearance"`
	Statement                   string                 `json:"statement"`
	DocumentNumber              string                 `json:"document_number"`
	VendorCode                  string                 `json:"vendor_code"`
	CollectionDueDate           pgtype.Date            `json:"collection_due_date"`
	CurrentStatus               CdmsStatus             `json:"current_status"`
	PfsPoc                      pgtype.Int8            `json:"pfs_poc"`
	GsaPoc                      pgtype.Int8            `json:"gsa_poc"`
	CustomerPoc                 pgtype.Int8            `json:"customer_poc"`
	PfsContacts                 pgtype.Int2            `json:"pfs_contacts"`
	OpenDate                    pgtype.Date            `json:"open_date"`
	ReconciledDate              pgtype.Date            `json:"reconciled_date"`
	CreatedAt                   pgtype.Timestamptz     `json:"created_at"`
	UpdatedAt                   pgtype.Timestamptz     `json:"updated_at"`
	IsActive                    bool                   `json:"is_active"`
	InProcessDate               interface{}            `json:"in_process_date"`
	ReferredToTreasuryDate      interface{}            `json:"referred_to_treasury_date"`
	ClosedPaymentReceivedDate   interface{}            `json:"closed_payment_received_date"`
	RefundDate                  interface{}            `json:"refund_date"`
	OffsetDate                  interface{}            `json:"offset_date"`
	WriteOffDate                interface{}            `json:"write_off_date"`
	BillAsIpacDate              interface{}            `json:"bill_as_ipac_date"`
	BillAsDodDate               interface{}            `json:"bill_as_dod_date"`
	EisIssuesDate               interface{}            `json:"eis_issues_date"`
	AgencyID                    string                 `json:"agency_id"`
	BureauCode                  string                 `json:"bureau_code"`
	DaysOld                     int32                  `json:"days_old"`
	AbsAmount                   int64                  `json:"abs_amount"`
	DaysToClose                 int32                  `json:"days_to_close"`
}

type IssueOwnerGsaChargebackMerge struct {
	UserID       int64 `json:"user_id"`
	ChargebackID int64 `json:"chargeback_id"`
}

type IssueOwnerPfsChargebackMerge struct {
	UserID       int64 `json:"user_id"`
	ChargebackID int64 `json:"chargeback_id"`
}

type NonIpacCommentsMerge struct {
	NonipacID int64 `json:"nonipac_id"`
	CommentID int64 `json:"comment_id"`
}

type NonIpacCustomerPocMerge struct {
	NonipacID     int64 `json:"nonipac_id"`
	CustomerPocID int64 `json:"customer_poc_id"`
}

type Nonipac struct {
	ID                          int64                  `json:"id"`
	ReportingSource             NonipacReportingSource `json:"reporting_source"`
	BusinessLine                ChargebackBusinessLine `json:"business_line"`
	BilledTotalAmount           pgtype.Numeric         `json:"billed_total_amount"`
	PrincipleAmount             pgtype.Numeric         `json:"principle_amount"`
	InterestAmount              pgtype.Numeric         `json:"interest_amount"`
	PenaltyAmount               pgtype.Numeric         `json:"penalty_amount"`
	AdministrationChargesAmount pgtype.Numeric         `json:"administration_charges_amount"`
	DebitOutstandingAmount      pgtype.Numeric         `json:"debit_outstanding_amount"`
	CreditTotalAmount           pgtype.Numeric         `json:"credit_total_amount"`
	CreditOutstandingAmount     pgtype.Numeric         `json:"credit_outstanding_amount"`
	Title                       pgtype.Text            `json:"title"`
	DocumentDate                pgtype.Date            `json:"document_date"`
	AddressCode                 string                 `json:"address_code"`
	Vendor                      string                 `json:"vendor"`
	DebtAppealForbearance       bool                   `json:"debt_appeal_forbearance"`
	Statement                   string                 `json:"statement"`
	DocumentNumber              string                 `json:"document_number"`
	VendorCode                  string                 `json:"vendor_code"`
	CollectionDueDate           pgtype.Date            `json:"collection_due_date"`
	CurrentStatus               CdmsStatus             `json:"current_status"`
	PfsPoc                      pgtype.Int8            `json:"pfs_poc"`
	GsaPoc                      pgtype.Int8            `json:"gsa_poc"`
	CustomerPoc                 pgtype.Int8            `json:"customer_poc"`
	PfsContacts                 pgtype.Int2            `json:"pfs_contacts"`
	OpenDate                    pgtype.Date            `json:"open_date"`
	ReconciledDate              pgtype.Date            `json:"reconciled_date"`
	CreatedAt                   pgtype.Timestamptz     `json:"created_at"`
	UpdatedAt                   pgtype.Timestamptz     `json:"updated_at"`
	IsActive                    bool                   `json:"is_active"`
}

type NonipacStatusMerge struct {
	NonipacID       int64 `json:"nonipac_id"`
	StatusHistoryID int64 `json:"status_history_id"`
}

type Permission struct {
	ID          int32       `json:"id"`
	Action      string      `json:"action"`
	Description pgtype.Text `json:"description"`
}

type RemovedRowsLog struct {
	ID               pgtype.UUID        `json:"id"`
	UploadID         pgtype.UUID        `json:"upload_id"`
	Timestamp        pgtype.Timestamptz `json:"timestamp"`
	ReportType       string             `json:"report_type"`
	OriginalRowData  []byte             `json:"original_row_data"`
	ReasonForRemoval string             `json:"reason_for_removal"`
}

type Role struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

type RolePermission struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

type StatusHistory struct {
	ID         int64              `json:"id"`
	Status     CdmsStatus         `json:"status"`
	StatusDate pgtype.Timestamptz `json:"status_date"`
	Notes      pgtype.Text        `json:"notes"`
	UserID     int64              `json:"user_id"`
}

type TempAgencyBureauStaging struct {
	Agency     string             `json:"agency"`
	BureauCode string             `json:"bureau_code"`
	VendorCode string             `json:"vendor_code"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type TempChargebackStaging struct {
	ID                     int64                     `json:"id"`
	ReportingSource        ChargebackReportingSource `json:"reporting_source"`
	Fund                   ChargebackFund            `json:"fund"`
	BusinessLine           ChargebackBusinessLine    `json:"business_line"`
	Region                 int16                     `json:"region"`
	LocationSystem         pgtype.Text               `json:"location_system"`
	Program                string                    `json:"program"`
	AlNum                  int16                     `json:"al_num"`
	SourceNum              string                    `json:"source_num"`
	AgreementNum           pgtype.Text               `json:"agreement_num"`
	Title                  pgtype.Text               `json:"title"`
	Alc                    string                    `json:"alc"`
	CustomerTas            string                    `json:"customer_tas"`
	TaskSubtask            string                    `json:"task_subtask"`
	ClassID                pgtype.Text               `json:"class_id"`
	CustomerName           string                    `json:"customer_name"`
	OrgCode                string                    `json:"org_code"`
	DocumentDate           pgtype.Date               `json:"document_date"`
	AccompDate             pgtype.Date               `json:"accomp_date"`
	AssignedRebillDrn      pgtype.Text               `json:"assigned_rebill_drn"`
	ChargebackAmount       pgtype.Numeric            `json:"chargeback_amount"`
	Statement              string                    `json:"statement"`
	BdDocNum               string                    `json:"bd_doc_num"`
	Vendor                 string                    `json:"vendor"`
	ArticlesServices       pgtype.Text               `json:"articles_services"`
	CurrentStatus          CdmsStatus                `json:"current_status"`
	ReasonCode             NullChargebackReasonCode  `json:"reason_code"`
	Action                 NullChargebackAction      `json:"action"`
	AlcToRebill            pgtype.Text               `json:"alc_to_rebill"`
	TasToRebill            pgtype.Text               `json:"tas_to_rebill"`
	LineOfAccountingRebill pgtype.Text               `json:"line_of_accounting_rebill"`
	SpecialInstruction     pgtype.Text               `json:"special_instruction"`
	NewIpacDocumentRef     pgtype.Text               `json:"new_ipac_document_ref"`
	CreatedAt              pgtype.Timestamptz        `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz        `json:"updated_at"`
	IsActive               bool                      `json:"is_active"`
}

type TempNonipacStaging struct {
	ID                          int64                  `json:"id"`
	ReportingSource             NonipacReportingSource `json:"reporting_source"`
	BusinessLine                ChargebackBusinessLine `json:"business_line"`
	BilledTotalAmount           pgtype.Numeric         `json:"billed_total_amount"`
	PrincipleAmount             pgtype.Numeric         `json:"principle_amount"`
	InterestAmount              pgtype.Numeric         `json:"interest_amount"`
	PenaltyAmount               pgtype.Numeric         `json:"penalty_amount"`
	AdministrationChargesAmount pgtype.Numeric         `json:"administration_charges_amount"`
	DebitOutstandingAmount      pgtype.Numeric         `json:"debit_outstanding_amount"`
	CreditTotalAmount           pgtype.Numeric         `json:"credit_total_amount"`
	CreditOutstandingAmount     pgtype.Numeric         `json:"credit_outstanding_amount"`
	Title                       pgtype.Text            `json:"title"`
	DocumentDate                pgtype.Date            `json:"document_date"`
	AddressCode                 string                 `json:"address_code"`
	Vendor                      string                 `json:"vendor"`
	DebtAppealForbearance       bool                   `json:"debt_appeal_forbearance"`
	Statement                   string                 `json:"statement"`
	DocumentNumber              string                 `json:"document_number"`
	VendorCode                  string                 `json:"vendor_code"`
	CollectionDueDate           pgtype.Date            `json:"collection_due_date"`
	CurrentStatus               CdmsStatus             `json:"current_status"`
	PfsPoc                      pgtype.Int8            `json:"pfs_poc"`
	GsaPoc                      pgtype.Int8            `json:"gsa_poc"`
	CustomerPoc                 pgtype.Int8            `json:"customer_poc"`
	PfsContacts                 pgtype.Int2            `json:"pfs_contacts"`
	OpenDate                    pgtype.Date            `json:"open_date"`
	ReconciledDate              pgtype.Date            `json:"reconciled_date"`
	CreatedAt                   pgtype.Timestamptz     `json:"created_at"`
	UpdatedAt                   pgtype.Timestamptz     `json:"updated_at"`
	IsActive                    bool                   `json:"is_active"`
}

type Upload struct {
	ID                pgtype.UUID        `json:"id"`
	StorageKey        string             `json:"storage_key"`
	Filename          string             `json:"filename"`
	ReportType        string             `json:"report_type"`
	Status            string             `json:"status"`
	UploadedAt        pgtype.Timestamptz `json:"uploaded_at"`
	ProcessedAt       pgtype.Timestamptz `json:"processed_at"`
	ErrorDetails      pgtype.Text        `json:"error_details"`
	ProcessedByUserID int64              `json:"processed_by_user_id"`
	RowsUpserted      pgtype.Int4        `json:"rows_upserted"`
	RowsRemoved       pgtype.Int4        `json:"rows_removed"`
}

type UserBusinessLineAccess struct {
	UserID       int64                  `json:"user_id"`
	BusinessLine ChargebackBusinessLine `json:"business_line"`
}

type UserRole struct {
	UserID int64 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}
