// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: creation_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChargeback = `-- name: CreateChargeback :one
INSERT INTO chargeback (
    reporting_source,
    fund,
    business_line,
    region,
    program,
    al_num,
    source_num,
    alc,
    customer_tas,
    task_subtask,
    customer_name,
    org_code,
    document_date,
    accomp_date,
    chargeback_amount,
    statement,
    bd_doc_num,
    vendor,
    -- Nullable fields
    location_system,
    agreement_num,
    title,
    class_id,
    assigned_rebill_drn,
    articles_services,
    current_status,
    reason_code,
    action
) VALUES (
    'ApplicationCreated',
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26
)
RETURNING id, reporting_source, fund, business_line, region, location_system, program, al_num, source_num, agreement_num, title, alc, customer_tas, task_subtask, class_id, customer_name, org_code, document_date, accomp_date, assigned_rebill_drn, chargeback_amount, statement, bd_doc_num, vendor, articles_services, current_status, reason_code, action, alc_to_rebill, tas_to_rebill, line_of_accounting_rebill, special_instruction, new_ipac_document_ref, created_at, updated_at, is_active
`

type CreateChargebackParams struct {
	Fund              ChargebackFund           `json:"fund"`
	BusinessLine      ChargebackBusinessLine   `json:"business_line"`
	Region            int16                    `json:"region"`
	Program           string                   `json:"program"`
	AlNum             int16                    `json:"al_num"`
	SourceNum         string                   `json:"source_num"`
	Alc               string                   `json:"alc"`
	CustomerTas       string                   `json:"customer_tas"`
	TaskSubtask       string                   `json:"task_subtask"`
	CustomerName      string                   `json:"customer_name"`
	OrgCode           string                   `json:"org_code"`
	DocumentDate      pgtype.Date              `json:"document_date"`
	AccompDate        pgtype.Date              `json:"accomp_date"`
	ChargebackAmount  pgtype.Numeric           `json:"chargeback_amount"`
	Statement         string                   `json:"statement"`
	BdDocNum          string                   `json:"bd_doc_num"`
	Vendor            string                   `json:"vendor"`
	LocationSystem    pgtype.Text              `json:"location_system"`
	AgreementNum      pgtype.Text              `json:"agreement_num"`
	Title             pgtype.Text              `json:"title"`
	ClassID           pgtype.Text              `json:"class_id"`
	AssignedRebillDrn pgtype.Text              `json:"assigned_rebill_drn"`
	ArticlesServices  pgtype.Text              `json:"articles_services"`
	CurrentStatus     CdmsStatus               `json:"current_status"`
	ReasonCode        NullChargebackReasonCode `json:"reason_code"`
	Action            NullChargebackAction     `json:"action"`
}

// Inserts a new chargeback record,from a manual UI entry.
// The 'reporting_source' is hardcoded to 'ApplicationCreated'.
func (q *Queries) CreateChargeback(ctx context.Context, arg CreateChargebackParams) (Chargeback, error) {
	row := q.db.QueryRow(ctx, createChargeback,
		arg.Fund,
		arg.BusinessLine,
		arg.Region,
		arg.Program,
		arg.AlNum,
		arg.SourceNum,
		arg.Alc,
		arg.CustomerTas,
		arg.TaskSubtask,
		arg.CustomerName,
		arg.OrgCode,
		arg.DocumentDate,
		arg.AccompDate,
		arg.ChargebackAmount,
		arg.Statement,
		arg.BdDocNum,
		arg.Vendor,
		arg.LocationSystem,
		arg.AgreementNum,
		arg.Title,
		arg.ClassID,
		arg.AssignedRebillDrn,
		arg.ArticlesServices,
		arg.CurrentStatus,
		arg.ReasonCode,
		arg.Action,
	)
	var i Chargeback
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.Fund,
		&i.BusinessLine,
		&i.Region,
		&i.LocationSystem,
		&i.Program,
		&i.AlNum,
		&i.SourceNum,
		&i.AgreementNum,
		&i.Title,
		&i.Alc,
		&i.CustomerTas,
		&i.TaskSubtask,
		&i.ClassID,
		&i.CustomerName,
		&i.OrgCode,
		&i.DocumentDate,
		&i.AccompDate,
		&i.AssignedRebillDrn,
		&i.ChargebackAmount,
		&i.Statement,
		&i.BdDocNum,
		&i.Vendor,
		&i.ArticlesServices,
		&i.CurrentStatus,
		&i.ReasonCode,
		&i.Action,
		&i.AlcToRebill,
		&i.TasToRebill,
		&i.LineOfAccountingRebill,
		&i.SpecialInstruction,
		&i.NewIpacDocumentRef,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const createDelinquency = `-- name: CreateDelinquency :one
INSERT INTO "nonipac" (
    reporting_source,
    business_line,
    billed_total_amount,
    principle_amount,
    interest_amount,
    penalty_amount,
    administration_charges_amount,
    debit_outstanding_amount,
    credit_total_amount,
    credit_outstanding_amount,
    document_date,
    address_code,
    vendor,
    debt_appeal_forbearance,
    statement,
    document_number,
    vendor_code,
    collection_due_date,
    open_date,
    current_status,
    -- Nullable fields
    title
) VALUES (
    'ApplicationCreated',
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20
)
RETURNING id, reporting_source, business_line, billed_total_amount, principle_amount, interest_amount, penalty_amount, administration_charges_amount, debit_outstanding_amount, credit_total_amount, credit_outstanding_amount, title, document_date, address_code, vendor, debt_appeal_forbearance, statement, document_number, vendor_code, collection_due_date, current_status, pfs_poc, gsa_poc, customer_poc, pfs_contacts, open_date, reconciled_date, created_at, updated_at, is_active
`

type CreateDelinquencyParams struct {
	BusinessLine                ChargebackBusinessLine `json:"business_line"`
	BilledTotalAmount           pgtype.Numeric         `json:"billed_total_amount"`
	PrincipleAmount             pgtype.Numeric         `json:"principle_amount"`
	InterestAmount              pgtype.Numeric         `json:"interest_amount"`
	PenaltyAmount               pgtype.Numeric         `json:"penalty_amount"`
	AdministrationChargesAmount pgtype.Numeric         `json:"administration_charges_amount"`
	DebitOutstandingAmount      pgtype.Numeric         `json:"debit_outstanding_amount"`
	CreditTotalAmount           pgtype.Numeric         `json:"credit_total_amount"`
	CreditOutstandingAmount     pgtype.Numeric         `json:"credit_outstanding_amount"`
	DocumentDate                pgtype.Date            `json:"document_date"`
	AddressCode                 string                 `json:"address_code"`
	Vendor                      string                 `json:"vendor"`
	DebtAppealForbearance       bool                   `json:"debt_appeal_forbearance"`
	Statement                   string                 `json:"statement"`
	DocumentNumber              string                 `json:"document_number"`
	VendorCode                  string                 `json:"vendor_code"`
	CollectionDueDate           pgtype.Date            `json:"collection_due_date"`
	OpenDate                    pgtype.Date            `json:"open_date"`
	CurrentStatus               CdmsStatus             `json:"current_status"`
	Title                       pgtype.Text            `json:"title"`
}

// Inserts a new delinquency (nonipac) record, from a manual UI entry.
// The 'reporting_source' is hardcoded to 'ApplicationCreated'.
func (q *Queries) CreateDelinquency(ctx context.Context, arg CreateDelinquencyParams) (Nonipac, error) {
	row := q.db.QueryRow(ctx, createDelinquency,
		arg.BusinessLine,
		arg.BilledTotalAmount,
		arg.PrincipleAmount,
		arg.InterestAmount,
		arg.PenaltyAmount,
		arg.AdministrationChargesAmount,
		arg.DebitOutstandingAmount,
		arg.CreditTotalAmount,
		arg.CreditOutstandingAmount,
		arg.DocumentDate,
		arg.AddressCode,
		arg.Vendor,
		arg.DebtAppealForbearance,
		arg.Statement,
		arg.DocumentNumber,
		arg.VendorCode,
		arg.CollectionDueDate,
		arg.OpenDate,
		arg.CurrentStatus,
		arg.Title,
	)
	var i Nonipac
	err := row.Scan(
		&i.ID,
		&i.ReportingSource,
		&i.BusinessLine,
		&i.BilledTotalAmount,
		&i.PrincipleAmount,
		&i.InterestAmount,
		&i.PenaltyAmount,
		&i.AdministrationChargesAmount,
		&i.DebitOutstandingAmount,
		&i.CreditTotalAmount,
		&i.CreditOutstandingAmount,
		&i.Title,
		&i.DocumentDate,
		&i.AddressCode,
		&i.Vendor,
		&i.DebtAppealForbearance,
		&i.Statement,
		&i.DocumentNumber,
		&i.VendorCode,
		&i.CollectionDueDate,
		&i.CurrentStatus,
		&i.PfsPoc,
		&i.GsaPoc,
		&i.CustomerPoc,
		&i.PfsContacts,
		&i.OpenDate,
		&i.ReconciledDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
