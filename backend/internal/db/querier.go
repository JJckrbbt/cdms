// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Updates the admin-modifiable fields of a specific chargeback record
	AdminUpdateChargeback(ctx context.Context, arg AdminUpdateChargebackParams) (Chargeback, error)
	// Updates the admin-modifiable fields of a specific delinquency record
	AdminUpdateDelinquency(ctx context.Context, arg AdminUpdateDelinquencyParams) (Nonipac, error)
	// Inserts a new chargeback record,from a manual UI entry.
	// The 'reporting_source' is hardcoded to 'ApplicationCreated'.
	CreateChargeback(ctx context.Context, arg CreateChargebackParams) (Chargeback, error)
	// Inserts a new delinquency (nonipac) record, from a manual UI entry.
	// The 'reporting_source' is hardcoded to 'ApplicationCreated'.
	CreateDelinquency(ctx context.Context, arg CreateDelinquencyParams) (Nonipac, error)
	// Create a record to track a new file upload
	CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error)
	CreateUserFromAuthProvider(ctx context.Context, arg CreateUserFromAuthProviderParams) (CdmsUser, error)
	// Mark all existing chargebacks from a specific report source as inactive before an UPSERT
	DeactivateChargebacksBySource(ctx context.Context, reportingSource ChargebackReportingSource) error
	DeactivateNonIpacsBySource(ctx context.Context, reportingSource NonipacReportingSource) error
	// Fetches a single active chargeback by business key
	GetActiveChargebackByBusinessKey(ctx context.Context, arg GetActiveChargebackByBusinessKeyParams) (ActiveChargebacksWithVendorInfo, error)
	// Fetches a single active chargeback by its primary key from the view.
	GetActiveChargebackByID(ctx context.Context, id int64) (ActiveChargebacksWithVendorInfo, error)
	// Fetches a single active delinquency by business key
	GetActiveDelinquencyByBusinessKey(ctx context.Context, documentNumber string) (ActiveNonipacWithVendorInfo, error)
	// Fetches a single active delinquency by its primary key from the view.
	GetActiveDelinquencyByID(ctx context.Context, id int64) (ActiveNonipacWithVendorInfo, error)
	GetAverageDaysForPFSCompletionForWindow(ctx context.Context, arg GetAverageDaysForPFSCompletionForWindowParams) (string, error)
	GetAverageDaysToPFSForWindow(ctx context.Context, arg GetAverageDaysToPFSForWindowParams) (string, error)
	// Fetches a single chargeback directly from the base table for updating.
	GetChargebackForUpdate(ctx context.Context, id int64) (Chargeback, error)
	// For a given list of bd_doc_nums, fetch the full business key and reporting source
	// to check for cross-report conflicts in Go before an UPSERT.
	GetChargebackSourcesByBDDocNums(ctx context.Context, dollar_1 []string) ([]GetChargebackSourcesByBDDocNumsRow, error)
	// Gets the count, total value, and percentage of total value for each chargeback status for active items.
	GetChargebackStatusSummary(ctx context.Context) ([]GetChargebackStatusSummaryRow, error)
	// Fetches a single chargeback directly from the base table for updating.
	GetDelinquencyForUpdate(ctx context.Context, id int64) (Nonipac, error)
	// Gets the count and total value of new chargebacks created within a specific date window.
	GetNewChargebackStatsForWindow(ctx context.Context, arg GetNewChargebackStatsForWindowParams) (GetNewChargebackStatsForWindowRow, error)
	// Provides an aging schedule for active nonipac items, broken down by business line and age categories.
	GetNonipacAgingScheduleByBusinessLine(ctx context.Context) ([]GetNonipacAgingScheduleByBusinessLineRow, error)
	// Gets the count, total value, and percentage of total value for each nonipac status for active items.
	GetNonipacStatusSummary(ctx context.Context) ([]GetNonipacStatusSummaryRow, error)
	// Gets the count of chargebacks passed to PFS and completed by PFS within a specific date window.
	// This version uses conditional aggregation for better performance and to avoid ambiguity.
	GetPFSCountsForWindow(ctx context.Context, arg GetPFSCountsForWindowParams) (GetPFSCountsForWindowRow, error)
	// Fetches all rows removed by processing of a particular upload
	// most recent first
	GetRemovedRowsByUploadID(ctx context.Context, uploadID pgtype.UUID) ([]RemovedRowsLog, error)
	// Fetches Status History for Chargebacks
	GetStatusHistoryForChargeback(ctx context.Context, chargebackID int64) ([]GetStatusHistoryForChargebackRow, error)
	// Fetches Status History for Delinquencies
	GetStatusHistoryForDelinquencies(ctx context.Context, nonipacID int64) ([]GetStatusHistoryForDelinquenciesRow, error)
	// Retrieve a detailed summary for a specific upload
	GetUpload(ctx context.Context, id pgtype.UUID) (GetUploadRow, error)
	GetUserByAuthProviderSubject(ctx context.Context, authProviderSubject string) (CdmsUser, error)
	GetUserByEmail(ctx context.Context, email string) (CdmsUser, error)
	// //go:generate mockery --name Querier --output ./mocks --outpkg mocks
	// Fetches a paginated list from the active_chargebacks_with_vendor_info view.
	// The view is already filtered by is_active = true.
	ListActiveChargebacks(ctx context.Context, arg ListActiveChargebacksParams) ([]ListActiveChargebacksRow, error)
	// Fetches a paginated list from the active_nonipac_with_vendor_info view.
	// The view is already filtered by is_active = true.
	ListActiveDelinquencies(ctx context.Context, arg ListActiveDelinquenciesParams) ([]ListActiveDelinquenciesRow, error)
	// Provides a paginated list of recent report uploads and their statuses
	ListUploads(ctx context.Context, arg ListUploadsParams) ([]ListUploadsRow, error)
	// Updates the user-modifiable fields of a specific chargeback record
	PFSUpdateChargeback(ctx context.Context, arg PFSUpdateChargebackParams) (Chargeback, error)
	// Updates the user-modifiable fields of a specific delinquency record
	PFSUpdateDelinquency(ctx context.Context, arg PFSUpdateDelinquencyParams) (Nonipac, error)
	// Update the status of an upload record after processing is complete or has failed
	UpdateUploadStatus(ctx context.Context, arg UpdateUploadStatusParams) error
	UpsertAgencyBureaus(ctx context.Context) (int64, error)
	// Insert new records from the staging table, or update existing ones based on the business key
	// The business key for chargebacks is BD Document Number + AL Number
	UpsertChargebacks(ctx context.Context) (int64, error)
	// The business key for delinquencies is Document Number
	UpsertNonIpacs(ctx context.Context) (int64, error)
	// Updates the user-modifiable fields of a specific chargeback record
	UserUpdateChargeback(ctx context.Context, arg UserUpdateChargebackParams) (Chargeback, error)
	// Updates the user-modifiable fields of a specific delinquency record
	UserUpdateDelinquency(ctx context.Context, arg UserUpdateDelinquencyParams) (Nonipac, error)
}

var _ Querier = (*Queries)(nil)
