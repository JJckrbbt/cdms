// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Create a record to track a new file upload
	CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error)
	// Mark all existing chargebacks from a specific report source as inactive before an UPSERT
	DeactivateChargebacksBySource(ctx context.Context, reportingSource ChargebackReportingSource) error
	DeactivateNonIpacsBySource(ctx context.Context, reportingSource NonipacReportingSource) error
	// Fetches a single active chargeback by its primary key from the view.
	GetActiveChargebackByID(ctx context.Context, id int64) (ActiveChargebacksWithVendorInfo, error)
	// Fetches a single active delinquency by its primary key from the view.
	GetActiveDelinquencyByID(ctx context.Context, id int64) (ActiveNonipacWithVendorInfo, error)
	// For a given list of bd_doc_nums, fetch the full business key and reporting source
	// to check for cross-report conflicts in Go before an UPSERT.
	GetChargebackSourcesByBDDocNums(ctx context.Context, dollar_1 []string) ([]GetChargebackSourcesByBDDocNumsRow, error)
	// Retrieve a detailed summary for a specific upload
	GetUpload(ctx context.Context, id pgtype.UUID) (Upload, error)
	// //go:generate mockery --name Querier --output ./mocks --outpkg mocks
	// Fetches a paginated list from the active_chargebacks_with_vendor_info view.
	// The view is already filtered by is_active = true.
	ListActiveChargebacks(ctx context.Context, arg ListActiveChargebacksParams) ([]ActiveChargebacksWithVendorInfo, error)
	// Fetches a paginated list from the active_nonipac_with_vendor_info view.
	// The view is already filtered by is_active = true.
	ListActiveDelinquencies(ctx context.Context, arg ListActiveDelinquenciesParams) ([]ActiveNonipacWithVendorInfo, error)
	// Provides a paginated list of recent report uploads and their statuses
	ListUploads(ctx context.Context, arg ListUploadsParams) ([]Upload, error)
	// Update the status of an upload record after processing is complete or has failed
	UpdateUploadStatus(ctx context.Context, arg UpdateUploadStatusParams) error
	UpsertAgencyBureaus(ctx context.Context) (int64, error)
	// Insert new records from the staging table, or update existing ones based on the business key
	// The business key for chargebacks is BD Document Number + AL Number
	UpsertChargebacks(ctx context.Context) (int64, error)
	// The business key for delinquencies is Document Number
	UpsertNonIpacs(ctx context.Context) (int64, error)
}

var _ Querier = (*Queries)(nil)
